---
# For Dynamic provisioning using StorageClass
- name: Add nfs_provisioner helm repo
  kubernetes.core.helm_repository:
    repo_url: "{{ nfs_provisioner_helm_repo_url }}"
    name: "{{ nfs_provisioner_helm_repo_name }}"

- name: Deploy nfs_provisioner helm chart for /nfs/share
  shell: >
    helm upgrade {{ nfs_provisioner_release }} {{ nfs_provisioner_helm_chart_ref }} \
    --install --set nfs.server={{ provisioning_ip }} \
    --set nfs.path={{ storage['nfs']['path'] | default('/nfs/share') }} --set storageClass.name={{ storage['class_name'] | default('dynamic')}} \
    --set storageClass.defaultClass=true \
    --set storageClass.provisionerName=nfs-provisioner-01 \
    --atomic --create-namespace --namespace {{ nfs_provisioner_namespace }}

- name: Wait for nfs_provisioner for /nfs/share
  shell: >
    kubectl -n {{ nfs_provisioner_namespace }} rollout status deployment/{{ nfs_provisioner_release }}
  register: nfs_provisioner_rollout_result
  retries: 5
  delay: 10
  until: "'successfully rolled out' in nfs_provisioner_rollout_result.stdout"

- name: Deploy nfs_provisioner helm chart for db data
  shell: >
    helm upgrade {{ nfs_provisioner_release }}-db {{ nfs_provisioner_helm_chart_ref }} \
    --install --set nfs.server={{ provisioning_ip }} \
    --set nfs.path="/var/lib/mysql" --set storageClass.name="mysql" \
    --set storageClass.provisionerName=nfs-provisioner-02 \
    --atomic --create-namespace --namespace {{ nfs_provisioner_namespace }}

- name: Wait for nfs_provisioner for db data to be rolled out
  shell: >
    kubectl -n {{ nfs_provisioner_namespace }} rollout status deployment/{{ nfs_provisioner_release }}-db
  register: nfs_provisioner_rollout_result
  retries: 5
  delay: 10
  until: "'successfully rolled out' in nfs_provisioner_rollout_result.stdout"
